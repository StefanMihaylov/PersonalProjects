//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.Services.Chat {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Participant", Namespace="http://schemas.datacontract.org/2004/07/ChatServer.WCF.Models")]
    [System.SerializableAttribute()]
    public partial class Participant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatRoom", Namespace="http://schemas.datacontract.org/2004/07/ChatServer.WCF.Models")]
    [System.SerializableAttribute()]
    public partial class ChatRoom : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParticipantAIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParticipantANameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParticipantBNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParticipantAId {
            get {
                return this.ParticipantAIdField;
            }
            set {
                if ((this.ParticipantAIdField.Equals(value) != true)) {
                    this.ParticipantAIdField = value;
                    this.RaisePropertyChanged("ParticipantAId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParticipantAName {
            get {
                return this.ParticipantANameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantANameField, value) != true)) {
                    this.ParticipantANameField = value;
                    this.RaisePropertyChanged("ParticipantAName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParticipantBName {
            get {
                return this.ParticipantBNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantBNameField, value) != true)) {
                    this.ParticipantBNameField = value;
                    this.RaisePropertyChanged("ParticipantBName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/ChatServer.WCF.Models")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatRoomIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParticipantNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatRoomId {
            get {
                return this.ChatRoomIdField;
            }
            set {
                if ((this.ChatRoomIdField.Equals(value) != true)) {
                    this.ChatRoomIdField = value;
                    this.RaisePropertyChanged("ChatRoomId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParticipantName {
            get {
                return this.ParticipantNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantNameField, value) != true)) {
                    this.ParticipantNameField = value;
                    this.RaisePropertyChanged("ParticipantName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Chat.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        ChatClient.Services.Chat.Participant Login(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.Chat.Participant> LoginAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetOtherPaticipants", ReplyAction="http://tempuri.org/IChatService/GetOtherPaticipantsResponse")]
        ChatClient.Services.Chat.Participant[] GetOtherPaticipants(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetOtherPaticipants", ReplyAction="http://tempuri.org/IChatService/GetOtherPaticipantsResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.Chat.Participant[]> GetOtherPaticipantsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateChatRoom", ReplyAction="http://tempuri.org/IChatService/CreateChatRoomResponse")]
        ChatClient.Services.Chat.ChatRoom CreateChatRoom(string participantA, string participantB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateChatRoom", ReplyAction="http://tempuri.org/IChatService/CreateChatRoomResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.Chat.ChatRoom> CreateChatRoomAsync(string participantA, string participantB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddMessage", ReplyAction="http://tempuri.org/IChatService/AddMessageResponse")]
        void AddMessage(int chatRoomId, int participantId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddMessage", ReplyAction="http://tempuri.org/IChatService/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(int chatRoomId, int participantId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessages", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesResponse")]
        ChatClient.Services.Chat.Message[] GetAllMessages(int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetAllMessages", ReplyAction="http://tempuri.org/IChatService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.Chat.Message[]> GetAllMessagesAsync(int chatRoomId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.Services.Chat.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<ChatClient.Services.Chat.IChatService>, ChatClient.Services.Chat.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ChatClient.Services.Chat.Participant Login(string userName) {
            return base.Channel.Login(userName);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.Chat.Participant> LoginAsync(string userName) {
            return base.Channel.LoginAsync(userName);
        }
        
        public ChatClient.Services.Chat.Participant[] GetOtherPaticipants(string userName) {
            return base.Channel.GetOtherPaticipants(userName);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.Chat.Participant[]> GetOtherPaticipantsAsync(string userName) {
            return base.Channel.GetOtherPaticipantsAsync(userName);
        }
        
        public ChatClient.Services.Chat.ChatRoom CreateChatRoom(string participantA, string participantB) {
            return base.Channel.CreateChatRoom(participantA, participantB);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.Chat.ChatRoom> CreateChatRoomAsync(string participantA, string participantB) {
            return base.Channel.CreateChatRoomAsync(participantA, participantB);
        }
        
        public void AddMessage(int chatRoomId, int participantId, string message) {
            base.Channel.AddMessage(chatRoomId, participantId, message);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(int chatRoomId, int participantId, string message) {
            return base.Channel.AddMessageAsync(chatRoomId, participantId, message);
        }
        
        public ChatClient.Services.Chat.Message[] GetAllMessages(int chatRoomId) {
            return base.Channel.GetAllMessages(chatRoomId);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.Chat.Message[]> GetAllMessagesAsync(int chatRoomId) {
            return base.Channel.GetAllMessagesAsync(chatRoomId);
        }
    }
}
