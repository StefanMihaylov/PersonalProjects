//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.Services.ChatRoomsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatRoom", Namespace="http://schemas.datacontract.org/2004/07/ChatServer.Common.Models")]
    [System.SerializableAttribute()]
    public partial class ChatRoom : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ParticipantNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ParticipantNames {
            get {
                return this.ParticipantNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantNamesField, value) != true)) {
                    this.ParticipantNamesField = value;
                    this.RaisePropertyChanged("ParticipantNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatRoomsService.IChatRoomsManager")]
    public interface IChatRoomsManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/OpenChatRoom", ReplyAction="http://tempuri.org/IChatRoomsManager/OpenChatRoomResponse")]
        ChatClient.Services.ChatRoomsService.ChatRoom OpenChatRoom(string[] participantNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/OpenChatRoom", ReplyAction="http://tempuri.org/IChatRoomsManager/OpenChatRoomResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom> OpenChatRoomAsync(string[] participantNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/OpenChatRoomById", ReplyAction="http://tempuri.org/IChatRoomsManager/OpenChatRoomByIdResponse")]
        ChatClient.Services.ChatRoomsService.ChatRoom OpenChatRoomById(int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/OpenChatRoomById", ReplyAction="http://tempuri.org/IChatRoomsManager/OpenChatRoomByIdResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom> OpenChatRoomByIdAsync(int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/GetAllOpenChatRooms", ReplyAction="http://tempuri.org/IChatRoomsManager/GetAllOpenChatRoomsResponse")]
        ChatClient.Services.ChatRoomsService.ChatRoom[] GetAllOpenChatRooms(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/GetAllOpenChatRooms", ReplyAction="http://tempuri.org/IChatRoomsManager/GetAllOpenChatRoomsResponse")]
        System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom[]> GetAllOpenChatRoomsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/CloseChatRoomById", ReplyAction="http://tempuri.org/IChatRoomsManager/CloseChatRoomByIdResponse")]
        void CloseChatRoomById(int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatRoomsManager/CloseChatRoomById", ReplyAction="http://tempuri.org/IChatRoomsManager/CloseChatRoomByIdResponse")]
        System.Threading.Tasks.Task CloseChatRoomByIdAsync(int chatRoomId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatRoomsManagerChannel : ChatClient.Services.ChatRoomsService.IChatRoomsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatRoomsManagerClient : System.ServiceModel.ClientBase<ChatClient.Services.ChatRoomsService.IChatRoomsManager>, ChatClient.Services.ChatRoomsService.IChatRoomsManager {
        
        public ChatRoomsManagerClient() {
        }
        
        public ChatRoomsManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatRoomsManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatRoomsManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatRoomsManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ChatClient.Services.ChatRoomsService.ChatRoom OpenChatRoom(string[] participantNames) {
            return base.Channel.OpenChatRoom(participantNames);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom> OpenChatRoomAsync(string[] participantNames) {
            return base.Channel.OpenChatRoomAsync(participantNames);
        }
        
        public ChatClient.Services.ChatRoomsService.ChatRoom OpenChatRoomById(int chatRoomId) {
            return base.Channel.OpenChatRoomById(chatRoomId);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom> OpenChatRoomByIdAsync(int chatRoomId) {
            return base.Channel.OpenChatRoomByIdAsync(chatRoomId);
        }
        
        public ChatClient.Services.ChatRoomsService.ChatRoom[] GetAllOpenChatRooms(string username) {
            return base.Channel.GetAllOpenChatRooms(username);
        }
        
        public System.Threading.Tasks.Task<ChatClient.Services.ChatRoomsService.ChatRoom[]> GetAllOpenChatRoomsAsync(string username) {
            return base.Channel.GetAllOpenChatRoomsAsync(username);
        }
        
        public void CloseChatRoomById(int chatRoomId) {
            base.Channel.CloseChatRoomById(chatRoomId);
        }
        
        public System.Threading.Tasks.Task CloseChatRoomByIdAsync(int chatRoomId) {
            return base.Channel.CloseChatRoomByIdAsync(chatRoomId);
        }
    }
}
